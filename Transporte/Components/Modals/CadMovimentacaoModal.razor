@using Models
@using MudBlazor
@using Transporte.Persistencia.Services.Interfaces

@inject ISnackbar Snackbar
@inject IMovimentacaoService _MovimentacaoService



@if (OnInitializedCompleted)
{


    <MudDialog>
        <TitleContent>

            <MudText Typo="Typo.h6">
                <MudIcon Icon="@(ModoCad == 'C'? Icons.Material.Filled.Create : Icons.Material.Filled.Edit )" Class="mr-3 mb-n1" />
                @if (ModoCad == 'C')
                {
                    <span>Criacao de Movimentacao</span>
                }
                else
                {
                    <span>Edição do Movimentacao do conteiner @_Movimentacao.NumeroConteiner de @_Movimentacao.DataInicio à @_Movimentacao.DataFim</span>
                }
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudForm Model="@_Movimentacao" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0">
                <MudTextField @bind-Value="@_Movimentacao.NumeroConteiner" Label="Numero do Conteiner" ReadOnly="@(ModoCad =='E')" For="@(()=> _Movimentacao.NumeroConteiner)" />
                <MudSelect @bind-Value="_Movimentacao.Tipo" Label="Status" HelperText="Enum" AdornmentColor="Color.Secondary" For="@(()=> _Movimentacao.Tipo)" ToStringFunc="@((x)=> (int)x==0 ?"Não definido" : x.ToString())">
                    @foreach (Movimentacao.ETipoMovimentacao item in Enum.GetValues(typeof(Movimentacao.ETipoMovimentacao)).Cast<Movimentacao.ETipoMovimentacao>())
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
            <MudDateRangePicker @bind-DateRange="@dateRange" Margin="Margin.Dense" 
                                PlaceholderStart="Data Inicial" PlaceholderEnd="Data Final" />

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Error" OnClick="Submit">@(ModoCad == 'C' ? "Criar" : "Editar")</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <span>Carregando ...</span>
}
@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Movimentacao Movimentacao { get; set; }

    [Parameter]
    public int MovimentacaoId { get; set; }

    private MudForm form { get; set; }


    private Movimentacao _Movimentacao { get; set; }
    private MovimentacaoValidator validator = new MovimentacaoValidator();

    char ModoCad = ' ';

    string TituloModal = "";

    bool OnInitializedCompleted = false;

    DateRange dateRange{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Movimentacao is not null)
        {
            _Movimentacao = Movimentacao;
            ModoCad = 'E';
        }
        else if (MovimentacaoId != 0)
        {
            ModoCad = 'E';
            _Movimentacao = await _MovimentacaoService.GetByIdAsync(MovimentacaoId);
        }
        else
        {
            _Movimentacao = new Movimentacao();
            ModoCad = 'C';
        }

        if (ModoCad == 'C')
        {
            TituloModal = "Criacao de Movimentacao";
        }
        else
        {
            TituloModal = $"Edicao do Movimentacao {_Movimentacao.NumeroConteiner}";
            dateRange.Start = _Movimentacao.DataInicio;
            dateRange.End = _Movimentacao.DataFim;
        }

        OnInitializedCompleted = true;
    }


    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        _Movimentacao.DataInicio = dateRange.Start ?? DateTime.MaxValue;
        _Movimentacao.DataFim = dateRange.End ?? DateTime.MinValue;

        var result = validator.Validate(_Movimentacao);
        var erro = result.Errors.FirstOrDefault(f => f.PropertyName == nameof(Movimentacao.DataInicio));



        await form.Validate();
        if(erro is not null)
        {
            Snackbar.Add(erro.ErrorMessage,Severity.Error);
            return;
        }

        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(_Movimentacao));
            return;
        }
        return;
    }

}
